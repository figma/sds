# Simple Design System (SDS) Cursor Instructions

Welcome to the Simple Design System repository! This is a comprehensive React-based design system with Figma integration using Code Connect. This guide will help you understand how to work with the codebase effectively.

## Repository Overview

SDS is a production-ready design system featuring:

- üé® **Figma Integration**: Full Code Connect integration with variables, styles, and components
- ‚öõÔ∏è **React Components**: Built on React Aria/Stately for accessibility
- üéØ **TypeScript**: Fully typed component library

- üé® **Design Tokens**: CSS custom properties with light/dark mode support
- üì± **Responsive**: Mobile-first responsive design patterns

## Getting Started

### Development Commands

- `npm run app:dev` - Start development server at localhost:8000

- `npm run app:build` - Build the application

- `npm run script:tokens` - Sync design tokens from Figma
- `npm run script:icons` - Sync icons from Figma

### Key Resources

- [Figma Community File](https://www.figma.com/community/file/1380235722331273046/simple-design-system) - Design source

## Quick Start Checklist

Before implementing any Figma design, follow this checklist:

1. ‚úÖ **Use Figma MCP tools** to extract design data when prompted.

- When trying to get a high level understanding of the design, you can use #get_image to get image representation of the design to contextualize what is selected in Figma
- Whenever you want more information about the specific UI elements that are selected, use #get_code
- With the get_code, get_code_connect_map, and get_variable_map tools you will receive information about patterns that should already be defined in this repository.
- If patterns dont already exist, you should ask for permission and clarify what about the design't already accounted for in this codebase that is present in the design.

2. ‚úÖ **Read component APIs** in the actual TypeScript files before using
3. ‚úÖ **Use SDS components only** - never import from `@react-aria`, `@react-stately`, etc.
4. ‚úÖ **Use CSS variables** - never hardcode colors, spacing, or typography
5. ‚úÖ **Use layout components** - never write custom CSS for positioning

## Importing Aliases

When importing SDS components, use aliases to ensure correct paths. These are described in the `vite.config.ts` file under `resolve.alias`:

```tsx
import { useMediaQuery } from "utils";
import { IconChevronLeft } from "icons";
import { placeholder } from "images";
import {
  Accordion,
  AccordionItem,
  Button,
  TextContentHeading,
  TextContentTitle,
} from "components";
```

## Figma to SDS Translation Guidelines

When implementing designs from Figma, follow these guidelines to ensure proper translation to the SDS component library.

## Annotations

In the MCP server response from Figma, you will see annotation attributes that provide context. The annotations can be describing behavior for the current node, or its descendants.

```jsx
<div
  data-content-annotations="Cards' button text is dynamic. They should say upgrade or downgrade if there is a current plan and it is better or worse."
  data-interaction-annotations="Card buttons should be disabled if they are the current plan and their text should say 'current plan'. The pill buttons should update the cards to show annual or monthly pricing."
/>
```

The prefix is a category for the annotation and describes the type of annotation. For example, "content" refers to text or image content annotations, and "interaction" refers to user interaction notes.

Always read these annotations carefully, as they provide important context for implementing the design correctly.

## CSS Variables & Design Tokens

All design tokens from Figma are defined as CSS variables in [src/theme.css](../src/theme.css). **Always use these variables instead of hardcoded values.**

- Colors: Use `var(--sds-color-*)` variables (e.g., `var(--sds-color-text-default-default)`)
- Spacing: Use `var(--sds-size-space-*)` variables (e.g., `var(--sds-size-space-400)`)
  - **important**: These variables can map to a prop value numerically. For example, `<Section padding="400">` corresponds to `padding: var(--sds-size-space-400)` in a Figma response.
- Typography: Use `var(--sds-typography-*)` or `var(--sds-font-*)` variables
- Border radius: Use `var(--sds-size-radius-*)` variables
- Shadows: Use `var(--sds-effects-shadows-*)` variables

### Example Usage

```css
.custom-element {
  background: var(--sds-color-background-default-default);
  color: var(--sds-color-text-default-default);
  padding: var(--sds-size-space-400);
  border-radius: var(--sds-size-radius-200);
}
```

## File Structure & Architecture

### Core Directories

```
src/
‚îú‚îÄ‚îÄ ui/                 # UI component library
‚îÇ   ‚îú‚îÄ‚îÄ components/     # Atomic components (Button, Input, etc.)
‚îÇ   ‚îú‚îÄ‚îÄ hooks/          # UI-specific custom hooks (useMediaQuery)
‚îÇ   ‚îú‚îÄ‚îÄ icons/          # SVG icon components
‚îÇ   ‚îú‚îÄ‚îÄ images/         # Image assets
‚îÇ   ‚îî‚îÄ‚îÄ utils/          # Utility functions and components

‚îú‚îÄ‚îÄ figma/              # Figma [Code Connect](https://www.figma.com/code-connect-docs/react/) files
‚îÇ   ‚îú‚îÄ‚îÄ components/     # Maps Figma components to React components
‚îÇ   ‚îî‚îÄ‚îÄ icons/          # Maps Figma icons to React icons
‚îú‚îÄ‚îÄ theme.css           # CSS custom properties (design tokens)
‚îú‚îÄ‚îÄ reset.css           # CSS reset
‚îú‚îÄ‚îÄ responsive.css      # Responsive utilities
‚îî‚îÄ‚îÄ App.tsx             # Demo application
```

## Component Library Structure

All UI components are in [src/ui](../src/ui). **Never create new components - always use existing SDS components.**

## SDS Component Hierarchy

When you see `hidden={true}` in Figma data, it indicates that the node should be ignored. This can happen with Figma components frequently, as nodes that can be toggled with a prop need to exist, even when the prop is false.

**Discovery tip**: When implementing Figma designs, check `codeDependencies` first, then browse the actual component files to understand available props and variants. See the complete component list in the Component Categories section below.

## Figma Translation Process

1. **Extract design using Figma tools**: Always use the Figma MCP tools to get the design data
2. **Identify SDS components**: Map Figma components to existing SDS components, and layouts
   - Use the `codeDependencies` field to find the correct component path
   - If no direct mapping exists, look for similar components
3. **Check component APIs**: Read the actual component files to understand props and usage patterns
4. **Use semantic imports**: Import from correct paths (e.g., `import { Button } from "ui/components/Button/Button"`)
5. **Apply design tokens**: Use CSS variables for all styling values

## Common Translation Patterns

### Buttons

```tsx
// Figma: Button with variant="Primary" and icon
// SDS Implementation:
<Button variant="primary" size="medium">
  Button Text
</Button>
```

### Navigation

```tsx
// Figma: Navigation Pills with selection states
// SDS Implementation:
<Navigation>
  <NavigationPill isSelected>Active Item</NavigationPill>
  <NavigationPill>Inactive Item</NavigationPill>
</Navigation>
```

## Best Practices & Common Pitfalls

### Component API Guidelines

- **Always check existing component props**: Read the TypeScript definitions in component files
- **Use semantic prop names**: `isSelected` not `active`, `variant` not `type`
- **Leverage composition**: Combine components rather than creating custom components
- **Follow naming conventions**: PascalCase for components, camelCase for props

### Essential Rules

- **Never hardcode colors, spacing, or typography values** - Always use CSS variables
- **Always import components from their specific paths** - Use the alias imports
- **Check component props before using** - Read the TypeScript definitions
- **Use layout components instead of CSS Grid/Flexbox** - Never write custom layout CSS
- **Reference existing stories in [src/stories](../src/stories/) for usage examples**

### Common Pitfalls & Solutions

### ‚ùå Pitfall 1: Hardcoding design values

```tsx
<div style={{ color: "#111111", padding: "16px" }}> // WRONG
```

**Fix**: Use CSS variables via class names: `<div className="example">` and `.example { color: var(--sds-color-text-default-default); padding: var(--sds-size-space-400); }`

### ‚ùå Pitfall 2: Creating custom layout CSS

```tsx
<div className="grid grid-cols-3 gap-4"> // WRONG
```

**Fix**: Use layout components: `<Flex direction="row" gap="400" type="third">`

### ‚ùå Pitfall 3: Not reading component APIs

```tsx
<Button active={true}> // WRONG - prop doesn't exist
```

**Fix**: Read the TypeScript file: `<Button isSelected>` or `<Button variant="primary">`

## Component Categories

### components (`src/ui/components/`)

Single-purpose, reusable components (alphabetically ordered):

- **Accordion** - Expandable content sections with `Accordion` and `AccordionItem`
- **Avatar** - User profile images and placeholders
- **Button** - Primary, neutral, subtle variants with size options
- **Checkbox** - Boolean selection controls with validation states
- **Dialog** - Modal dialogs and overlays with backdrop
- **Fieldset** - Form fieldset grouping with legend
- **Icon** - Consistent icon rendering (check [src/ui/icons](../src/ui/icons/) for available icons)
- **IconButton** - Icon-only buttons with accessible labels
- **Image** - Responsive images with loading states
- **Input** - Form input fields with validation states and labels
- **Link** - Navigation and external links with proper styling
- **ListBox** - Selection lists with keyboard navigation
- **Logo** - Brand logos and identity elements
- **Menu** - Dropdown menus and context menus
- **Navigation** - Navigation pills and buttons with selection states
- **Notification** - Toast notifications and alerts
- **Pagination** - Page navigation controls with page numbers
- **Radio** - Single selection from multiple options
- **Search** - Search input fields with suggestions
- **Select** - Dropdown selection components with search
- **Slider** - Range input controls with min/max values
- **Switch** - Toggle controls for boolean settings
- **Tab** - Tab navigation with panels
- **Table** - Data tables with sorting, filtering, and pagination
- **Tag** - Labels, badges, and category indicators
- **Text** - Typography components with semantic variants
- **Textarea** - Multi-line text input with resize options
- **Tooltip** - Contextual help and information overlays

### Hooks (`src/ui/hooks/`)

UI-specific custom React hooks:

- **useMediaQuery** - Responsive breakpoint detection

## Figma Integration

SDS uses Figma Code Connect for seamless design-to-code integration. Here's how it works:

- **Design Tokens**: Figma styles are synced as CSS custom properties (e.g., `--sds-color-primary`)
- **Components**: Figma components are mapped to SDS components with equivalent props and variants
- **Assets**: Figma images and icons are exported as React components or assets

### Figma File Setup

To enable Code Connect:

1. Use the **"SDS - Design Tokens"** and **"SDS - Components"** styles in Figma
2. Organize components in Figma using the same structure as SDS (components, compositions, etc.)
3. Publish changes in Figma, then run `npm run script:tokens` and `npm run script:icons` to sync

### Known Limitations

- Not all Figma features have 1:1 parity with SDS components (e.g., complex interactions)
- Some manual adjustment may be needed after syncing, especially for layout and spacing
- Ensure Figma components are named and organized according to SDS conventions for best results
